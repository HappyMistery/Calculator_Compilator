// Error handling
-"hello"        //Unary Minus Operator (-) cannot be applied to type 'String'. Only type 'Integer' and 'Float'
+true           //Unary Plus Operator (+) cannot be applied to type 'Boolean'. Only type 'Integer' and 'Float'
5 + false       //Addition (+) operator cannot be applied to type 'Boolean'
"hello" - 3     //Subtraction (-) operator cannot be applied to type 'String'
10/0        //Division by zero
5%0     //Modulo by zero
"hello" ** 2        //Power (**) operator cannot be applied to type 'String'
"abc" > 123     //Higher (>) operator cannot be applied to type 'String'
5 and "hello"       //And (and) operator can only be applied to type 'Boolean'
sin(true)       //sin() cannot take a type 'Boolean' as a parameter
tan(PI/2)       //Indefinition error
false b8        //Base conversion (b10 to b8) cannot be applied to type 'Boolean'. Only type 'Integer'
"testing" b16       //Base conversion (b10 to b16) cannot be applied to type 'String'. Only type 'Integer'
abc[2] := 4.5 b2    //Base conversion (b10 to b2) cannot be applied to type 'Float'. Only type 'Integer'
a       //Variable 'a' does not exist
vector[true] := "something" //Arrays can only be accessed using 'Integer', not 'Boolean'
arr[5]  //Array element 'arr[5]' does not exist
xyz[4] := 3.5
xyz[7] := true  //Array 'xyz[]' cannot be resized to accept element 'xyz[7]'
false == 3  //Equal (==) operator for type 'Boolean' can only operate against another value of type 'Boolean'
PI <> "PI"  //Not equal (<>) operator for type 'String' can only operate against another value of type 'String'
else    //Cannot use the word 'else' without a previous conditional declaration
fi  //Cannot use the word 'fi' without a previous conditional declaration
if 4 then   //Structure for an if conditional is "if <boolean_expression> then <statement_list> fi
case 0:    //Cannot use the word 'case' without a previous switch declaration
default: //Cannot use the word 'default' without a previous switch declaration
fswitch //Cannot use the word 'fswitch' without a previous switch declaration
switch 5
    case "hola":    //Case's condition must match switch's data type
fswitch    //Switch cannot end without a 'default' block declared
done    //Cannot use the word 'done' without a previous loop declaration
until true  //Cannot use 'until <boolean_expression>' without a previous loop declaration
repeat 0 do //Loop has to be repeated at least 1 time, not lower
repeat "hola" do    //Structure for a repeat loop is "repeat <arithmetic_integer_expression> do <statement_list> done"
while 5 do  //Structure for a while loop is "while <boolean_expression> do <statement_list> done"
for a in 3..3 do    //Loop has to be repeated at least 1 time, range values cannot be the same
for b in true..76 do    //The range for a for loop needs to be comprised by two integer values
do
    "aa"
until "xd"  //Structure for a do until loop is "do <statement_list> until <boolean_expression>"
