

// Basic boolean operations
3 > 2           // true
3 >= 3          // true
2 < 5           // true
3 <= 3          // true
2 == 2          // true
3 != 4          // true
true && false   // false
true || false   // true
!true           // false

// Complex boolean operations
(3 > 2) && (5 == 5 || 2 != 3)           // true
!(3 <= 4 && 2 < 5) || 1 == 1            // true
true && (false || true) && !(false)     // true
(2+3 > 5) || (3*2 == 6) && !(5/2 > 2.5) // true

// Basic string operations
"hello" + "world"          // helloworld
"abc" + 123                // abc123
"test" + 3.14              // test3.14
SUBSTR("abcdef", 2, 3)     // cde

// Complex string operations
"hello" + " " + "world" + "!"    // hello world!
"abc" + (123 + 456)              // abc579
"test" + (3.14 + 7**2)           // test52.14
SUBSTR("abcdef", 2, 3) + "xyz"   // cdexyz

// Basic trigonometric functions
sin(30)     // 0.5
cos(60)     // 0.5
tan(45)     // 1.0

// Complex trigonometric operations
sin(30) + cos(60) * tan(45)                 // 1.0
(sin(45) + cos(30)) * (tan(60) - sin(90))   // 1.93185
cos(45)**2 + sin(45)**2                     // 1.0

// Constants
PI    // 3.14159
E     // 2.71828




















arit_expr:
    start_int_expr      { fprintf(yyout, "%d\n", $1); }
  | start_float_expr    { fprintf(yyout, "%g\n", $1); }
  | ID ASSIGN int_expr    { fprintf(yyout, "%d\n", $3); }
  | ID ASSIGN float_expr  { fprintf(yyout, "%g\n", $3); }
;


start_int_expr:
    int_expr    { $$ = $1; }
;

int_expr:
    LEN str_expr            { $$ = strlen($2); }
  | SUB int_expr            { $$ = -$2; }
  | ADD int_expr            { $$ = +$2; }
  | int_expr ADD int_term   { $$ = $1 + $3; }
  | int_expr SUB int_term   { $$ = $1 - $3; }
  | int_term            { $$ = $1; }
;

int_term:
    int_term MUL int_pow    { $$ = $1 * $3; }
  | int_term MOD int_pow    { $$ = $1 % $3; }
  | int_pow             { $$ = $1; } 
;

int_pow:
    int_pow POW int_factor  { $$ = pow($1,$3); }
  | int_factor          { $$ = $1; }
;

int_factor:
    INT         { $$ = $1; }
  | int_expr    { $$ = $1; }
  | '(' int_expr ')'    { $$ = $2; }
;


start_float_expr:
    float_expr    { $$ = $1; }
;

float_expr:  
    SUB float_expr               { $$ = -$2; }
  | ADD float_expr              { $$ = +$2; }
  | float_expr ADD float_term   { $$ = $1 + $3; }
  | start_int_expr ADD float_term     { $$ = $1 + $3; }
  | float_expr ADD start_int_expr     { $$ = $1 + $3; }
  | float_expr SUB float_term   { $$ = $1 - $3; }
  | start_int_expr SUB float_term     { $$ = $1 - $3; }
  | float_expr SUB start_int_expr     { $$ = $1 - $3; }
  | float_term             { $$ = $1; }
;

float_term:
    float_term MUL float_pow    { $$ = $1 * $3; }
  | start_int_expr MUL float_pow      { $$ = $1 * $3; }
  | float_term MUL start_int_expr     { $$ = $1 * $3; }
  | float_term DIV float_pow    { $$ = $1 / $3; }
  | start_int_expr DIV start_int_expr       { $$ = (float)$1 / (float)$3; }
  | start_int_expr DIV float_pow      { $$ = $1 / $3; }
  | float_term DIV start_int_expr     { $$ = $1 / $3; }
  | float_term MOD float_pow    { $$ = fmod($1, $3); }
  | start_int_expr MOD float_pow      { $$ = fmod((float)$1, $3); }
  | float_term MOD start_int_expr     { $$ = fmod($1, (float)$3); }
  | float_pow             { $$ = $1; }
;

float_pow:
    float_pow POW float_factor  { $$ = pow($1,$3); }
  | start_int_expr POW float_factor   { $$ = pow($1,$3); }
  | float_pow POW start_int_expr      { $$ = pow($1,$3); }
  | float_factor          { $$ = $1; }
;

float_factor:
    FLOAT     { $$ = $1; }
  | PI        { $$ = PI_CONST; }
  | E         { $$ = E_CONST; }
  | SIN float_expr      { $$ = sin($2 * (PI_CONST / 180)); }
  | SIN start_int_expr  { $$ = sin($2 * (PI_CONST / 180)); }
  | COS float_expr      { $$ = cos($2 * (PI_CONST / 180)); }
  | COS start_int_expr  { $$ = cos($2 * (PI_CONST / 180)); }
  | TAN float_expr      { $$ = tan($2 * (PI_CONST / 180)); }
  | TAN start_int_expr  { $$ = tan($2 * (PI_CONST / 180)); }
  | float_expr          { $$ = $1; }
  | '(' float_expr ')'  { $$ = $2; }
;